.table {
    position: relative;
    display: grid;
    grid-template-columns: 2em minmax(10em, max-content) repeat(var(--columns), auto);
    align-content: start;
    padding-inline: 1px;
    margin-inline: -1px;

    block-size: 100%;

    & input[type="checkbox"] {
        margin: .1em;
    }

    & .cell {
        display: grid;
        padding: .5em;
        border: 1px solid transparent;
        border-radius: var(--radii-m);

        &:has(textarea:focus) {
            border-color: var(--info);
        }

        & > span {
            align-self: center;
        }
    }

    & :is(.header, .main, .footer) {
        grid-column: span calc(2 + var(--columns));
        display: grid;
        grid-template-columns: subgrid;
    }

    & .header {
        position: sticky;
        inset-block-start: 0;
        border-block-end: 1px solid var(--surface-300);
    }

    & .main {
        overflow: clip auto;
    }

    & .row {
        --bg: var(--text);
        --alpha: 0;
        grid-column: span calc(2 + var(--columns));
        display: grid;
        grid-template-columns: subgrid;
        border: 1px solid transparent;
        background-color: color(from var(--bg) srgb r g b / var(--alpha));

        &:has(> .cell > :checked) {
            --bg: var(--info);
            --alpha: .1;
            border-color: var(--bg);

            & span {
                font-variation-settings: 'GRAD' 1000;
            }

            & + :has(> .cell> :checked) {
                border-block-start-color: transparent;
            }

            &:has(+ .row > .cell > :checked) {
                border-block-end-color: transparent;
            }
        }

        &:hover {
            --alpha: .2 !important;
        }
    }

    & details {
        display: contents;

        &::details-content {
            grid-column: span calc(2 + var(--columns));
            display: grid;
            grid-template-columns: subgrid;
        }

        &:not([open])::details-content {
            display: none;
        }

        & > summary {
            grid-column: 2 / span calc(1 + var(--columns));
            padding: .5em;
            padding-inline-start: calc(var(--depth) * 1em + .5em);

        }

        & > .row > .cell > span {
            padding-inline-start: calc(var(--depth) * 1em);
        }
    }
}

@property --depth {
    syntax: "<number>";
    inherits: false;
    initial-value: 0;
}